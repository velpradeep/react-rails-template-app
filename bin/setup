#!/usr/bin/env ruby
require 'fileutils'
include FileUtils

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end


def setup!
  within_project_root do
    test "ruby -v" => ruby_version
    system! 'gem install bundler --no-document --conservative'
    system('bundle check') || system!('bundle install')
    p "----------Setting Up Wepacker-------------"
    p "--------------------------------"
    system! "rails webpacker:install"
    system! "rails webpacker:install:react"
    p "----------Setting Up Wepaker with React is Done-------------"
  end
end


begin
  require "highline"
rescue LoadError
  # If highline is missing, we'll gracefully omit ansi color output
end

def within_project_root(&block)
  Dir.chdir(File.expand_path("../..", __FILE__), &block)
end

def test(opts)
  command, output = opts.first

  log(:yellow, "test #{command}") do
    unless `#{command}`.include?(output)
      die("#{command} does not include #{output}")
    end
  end
end
def ruby_version
  @ruby_version ||= begin
    IO.read(".ruby-version").strip
  end
end

def run(command)
  log(:blue, "run  #{command}") do
    shell = "#{command} > /dev/null"
    with_clean_bundler_env do
      system(shell) or die("#{command} exited with non-zero status")
    end
  end
end

def with_clean_bundler_env(&block)
  return block.call unless defined?(Bundler)
  Bundler.with_clean_env(&block)
end

def copy(example_path)
  copy_path = example_path.sub(/\.?example/, "")
  return if File.exist?(copy_path)

  log(:magenta, "copy #{example_path} → #{copy_path}") do
    FileUtils.cp(example_path, copy_path)
  end
end

def log(color, message, out=$stdout, &block)
  if defined?(HighLine::String)
    message.sub!(/^(\S*)/) { HighLine::String.new($1).public_send(color) }
  end

  if block_given?
    out.print("#{message}… ")
    yield
    log(:green, "✔︎")
  else
    out.puts(message)
  end
end

def die(message)
  puts
  log(:red, "FAIL #{message}", $stderr)
  exit(1)
end

setup!

# -#chdir APP_ROOT do
# -#  # This script is a starting point to setup your application.
# -#  # Add necessary setup steps to this file.
# -#
# -#  puts '== Installing dependencies =='
# -#  system! 'gem install bundler --conservative'
# -#  system('bundle check') || system!('bundle install')
# -#
# -#  # Install JavaScript dependencies if using Yarn
# -#  # system('bin/yarn')
# -#
# -#  # puts "\n== Copying sample files =="
# -#  # unless File.exist?('config/database.yml')
# -#  #   cp 'config/database.yml.sample', 'config/database.yml'
# -#  # end
# -#
# -#  puts "\n== Preparing database =="
# -#  system! 'bin/rails db:setup'
# -#
# -#  puts "\n== Removing old logs and tempfiles =="
# -#  system! 'bin/rails log:clear tmp:clear'
# -#
# -#  puts "\n== Restarting application server =="
# -#  system! 'bin/rails restart'
# -#end


